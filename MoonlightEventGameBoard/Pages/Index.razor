@page "/"
@using System.Globalization

<style>
    .vertical-wrap{
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        justify-content: center;
        align-items: stretch;
        align-content: stretch;
    }

    .horizontal-wrap{
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: space-around;
        align-items: center;
        align-content: stretch;
    }

    .challenge-wrap{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        align-items: center;
        align-content: space-around;
    }

    .default-game-btn {
        padding: 0;
        border: none;
        font-weight: bold;
        font-size: 3vw;
        outline: none !important;
        margin: 1%;
    }

    .number-btn {
/* ReSharper disable once HexColorValueWithAlpha */
        background: #FFFFFFDA;
    }

    .btn-challenge-done {
        border: 3px solid;
        border-color: black;
        background: #00000020;
    }

    .number-btn-disabled {
        background: #CCC;
        opacity: 0.9;
    }

    .default-label {
        font-size: 3vw;
        margin: 1%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .score-container-label {
        border: 2px solid;
    }

</style>

@* ReSharper disable CssNotResolved *@
@* ReSharper disable InvalidValue *@
<div class="vertical-wrap" style="height: 100%; width: 100%; padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);">
    @* ReSharper restore InvalidValue *@
    @* ReSharper restore CssNotResolved *@

    <div style="height: 10%; width: 100%; background: black"></div>
    
    <div class="horizontal-wrap" style="height: 90%; width: 100%">
        @foreach (var category in this.Game.Categories)
        {
            <div class="vertical-wrap" style="height: 100%; width: @(((double)100 / (double)this.Game.Categories.Count).ToString(CultureInfo.InvariantCulture))%; background: @category.Color">
                <div class="horizontal-wrap" style="width: 90%; height: 8%; font-size: 3.5vw; text-align: center; align-self: center"><label style="margin: 0">@category.Title</label></div>
                @foreach (var level in category.Levels)
                {
                    @*<div class="challenge-wrap" style="width: 100%; height: @(((double)100 / 6 * (level.Challenges.Count > 2 ? 2 : 1)).ToString(CultureInfo.InvariantCulture))%">*@
                    <div class="challenge-wrap" style="width: 90%; height: @((23 * level.LevelSpaceMutliplier()).ToString(CultureInfo.InvariantCulture))%; align-self: center; padding: 2.5% 0">
                        @foreach (var challenge in level.Challenges)
                        {
                        
                            <button class="btn default-game-btn @(challenge.IsDone ? "btn-challenge-done" : "") @(challenge.CanBeToggled ? "number-btn" : "number-btn-disabled")" disabled="@(!challenge.CanBeToggled)"
                                    style="width: @((this.Size * 1.5).ToString(CultureInfo.InvariantCulture))px; height: @(this.Size)px; border-radius: @((this.Size * 0.1).ToString(CultureInfo.InvariantCulture))px;"
                                    @onclick="(() => { this.Game.OpenDialog(challenge); })">@challenge.Score</button>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@if (this.Game.ShowDialog)  
{  
   <div style="position: absolute; height: 100%; width: 100%; top: 0; left: 0; background: black; z-index: 10; opacity: 0.4"></div>

   <div class="horizontal-wrap" style="position: absolute; height: 100%; width: 100%; top: 0; left: 0; justify-content: center;">
       <div class="modal fade show d-block" style="max-width: 90%; position: unset; width: 70%; height: auto" tabindex="-1" role="dialog">  
           <div class="modal-dialog" style="max-width: none" role="document">  
               <div class="modal-content">  
                   <div class="vertical-wrap" style="padding: 3%">
                       <p style="font-weight: bold; font-size: 2vw; margin: 2%;">@this.Game.DialogChallenge?.Description</p>
                       <div class="horizontal-wrap" style="width: 30%; align-self: flex-end">
                           <button class="btn btn-outline-primary btn-sm" style="width: 40%; font-size: 2vw; border-radius: @((this.Size * 0.1).ToString(CultureInfo.InvariantCulture))px;" @onclick="@(() => { this.Game.CloseDialog(true); })">Ja</button>
                           <button class="btn btn-outline-primary btn-sm" style="width: 40%; font-size: 2vw; border-radius: @((this.Size * 0.1).ToString(CultureInfo.InvariantCulture))px;" @onclick="@(() => { this.Game.CloseDialog(false); })">Nein</button>
                       </div>
                   </div>  
               </div>  
           </div>  
       </div>  
   </div>
}